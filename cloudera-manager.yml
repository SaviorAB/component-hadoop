application:
  configuration:
    configuration.cookbooks_url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-hadoop-cookbooks-stable-v5.tar.gz"
    configuration.repository_url: "http://archive.cloudera.com"
    configuration.cloudera_manager_version: "5.1.3"
  interfaces:
    configuration:
      cookbooks_url: "bind(cloudera-manager#input.cookbooks_url)"
      repository_url: "bind(cloudera-manager#input.repository_url)"
      cloudera_manager_version: "bind(cloudera-manager#input.cloudera_manager_version)"
    compute-Manager: 
      "*": "bind(cloudera-manager#compute-Manager.*)"
    compute-Master:  
      "*": "bind(cloudera-manager#compute-Master.*)"
    compute-DataNodes:
      "*": "bind(cloudera-manager#compute-DataNodes.*)"
    vms:
      Node_Manager_DNS: "bind(cloudera-manager#vms.Node_Manager_DNS)"
      Node_Master_DNS: "bind(cloudera-manager#vms.Node_Master_DNS)"
      DataNodesDNS: "bind(cloudera-manager#vms.DataNodesDNS)"
    cloudera-manager:
      Manager_URL: "bind(cloudera-manager#result.cloudera_Manager)"
      Login: "bind(cloudera-manager#result.cloudera_Login)"
      Password: "bind(cloudera-manager#result.cloudera_Password)"
      application-pic: "bind(metadata#output.application-pic)"
  components:
    metadata:
      type: cobalt.common.Constants
      interfaces:
        output:
          application-pic:
            type: publish-signal(map<string, object>)
            name: ""
      configuration:
        configuration.values:
          output.application-pic:
            large: "https://s3.amazonaws.com/qubell-images/manager.png"
            small: "https://s3.amazonaws.com/qubell-images/manager.png"
            small-height: 64
    cloudera-manager:
      type: workflow.Instance
      interfaces:
        input:
          repository_url:
            type: configuration(string)
            name: Cloudera RPM repository
          cookbooks_url:
            type: configuration(string)
            name: Chef cookbooks
          cloudera_manager_version:
            type: configuration(string)
            name: Cloudera Manager version
        compute-Master:
          networks:        consume-signal(map<string, map<string, string>>)
          exec:            send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:        send-command(string filename, bytes payload)
          get-file:        send-command(string filename => bytes payload)
        compute-Manager:
          networks:        consume-signal(map<string, map<string, string>>)
          exec:            send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:        send-command(string filename, bytes payload)
          get-file:        send-command(string filename => bytes payload)
        compute-DataNodes:
          networks:        consume-signal(map<string, map<string, string>>)
          exec:            send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:        send-command(string filename, bytes payload)
          get-file:        send-command(string filename => bytes payload)
        vms:
          Node_Manager_DNS: consume-signal(string)
          Node_Master_DNS: consume-signal(string)
          DataNodesDNS: consume-signal(list<string>)
        result:
          cloudera_Manager:
            type: publish-signal(string)
            name: Manager URL
          cloudera_Login:
            type: publish-signal(string)
            name: Login
          cloudera_Password:
            type: publish-signal(string)
            name: Password
      required: [vms, compute-Manager, compute-Master, compute-DataNodes]
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - get-signals:
                  action: getSignals
                  parameters:
                    multi: true
                  output:
                    signals: result
              - install-cloudera-manager:
                  action: chefrun
                  precedingPhases: [ get-signals ]
                  parameters:
                    isSudo: true
                    isSolo: true
                    roles: ["compute-Manager"]
                    recipeUrl: "{$.cookbooks_url}"
                    runList: [ "recipe[cloudera::manager]" ]
                    retryCount: 2
                    jattrs:
                      java:
                        java_home: "/usr/java/jdk6"
                      cloudera:
                        manager:
                          version: "{$.cloudera_manager_version}"
                        repository_url: "{$.repository_url}"
              - install-cloudera-agent:
                  action: chefrun
                  precedingPhases: [ install-cloudera-manager ]
                  parameters:
                    isSudo: true
                    isSolo: true
                    roles: [ "compute-Master", "compute-Manager", "compute-DataNodes" ]
                    recipeUrl: "{$.cookbooks_url}"
                    runList: [ "recipe[cloudera::agent]" ]
                    retryCount: 2
                    jattrs:
                      java:
                        java_home: "/usr/java/jdk6"
                      cloudera:
                        manager:
                          host: "{$.signals.vms.*.Node_Manager_DNS[0]}"
                          version: "{$.cloudera_manager_version}"
                          #hadoop:
                          #  version: "{$.cloudera_hadoop_version}"
                        repository_url: "{$.repository_url}"
              - start-cloudera-agent:
                  action: chefrun
                  phase: start-agent
                  precedingPhases: [ install-cloudera-agent ]
                  parameters:
                    isSudo: true
                    isSolo: true
                    roles: [ "compute-Master", "compute-Manager", "compute-DataNodes" ]
                    recipeUrl: "{$.cookbooks_url}"
                    runList: [ "recipe[cloudera::start_agent]" ]

              - install-cloudera-cms:
                  action: chefrun
                  precedingPhases: [ start-cloudera-agent ]
                  parameters:
                    isSudo: true
                    isSolo: true
                    roles: [ "compute-Manager" ]
                    recipeUrl: "{$.cookbooks_url}"
                    runList: [ "recipe[cloudera::cms]" ]
                    retryCount: 2
                    jattrs:
                      java:
                        java_home: "/usr/java/jdk6"
                      cloudera:
                        manager:
                          host: "{$.signals.vms.*.Node_Manager_DNS[0]}"
                        repository_url: "{$.repository_url}"
            return:
              - cloudera_Manager:
                  description: "Cloudera Manager URL"
                  value: "http://{$.signals.compute-Manager.*.networks.public.ip[0]}:7180"
              - cloudera_Login:
                  description: "Login for Cloudera Manager"
                  value: "admin"
              - cloudera_Password:
                  description: "Password for Cloudera Manager"
                  value: "admin"
