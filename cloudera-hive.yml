application:
  configuration:
    configuration.cookbooks_url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-hadoop-cookbooks-stable-v5.tar.gz"
    configuration.repository_url: "http://archive.cloudera.com"
    configuration.cloudera_manager_version: "5.1.3"
    configuration.cloudera_hadoop_version: "5.1.3"
    configuration.metastore_root_password: "hive"
  interfaces:
    configuration:
      cookbooks_url: "bind(cloudera-hive#input.cookbooks_url)"
      repository_url: "bind(cloudera-hive#input.repository_url)"
      cloudera_manager_version: "bind(cloudera-hive#input.cloudera_manager_version)"
      cloudera_hadoop_version: "bind(cloudera-hive#input.cloudera_hadoop_version)"
      metastore_root_password: "bind(cloudera-hive#input.metastore_root_password)"
    compute-Manager: 
      "*": "bind(cloudera-hive#compute-Manager.*)"
    compute-DataNodes:
      "*": "bind(cloudera-hive#compute-DataNodes.*)"
    vms:
      Node_Manager_DNS: "bind(cloudera-hive#vms.Node_Manager_DNS)"
      Node_Master_DNS: "bind(cloudera-hive#vms.Node_Master_DNS)"
      DataNodesDNS: "bind(cloudera-hive#vms.DataNodesDNS)"
    cloudera-hadoop:
      NameNode: "bind(cloudera-hive#cloudera-hadoop.NameNode)"
      Primary_NameNode: "bind(cloudera-hive#cloudera-hadoop.Primary_NameNode)"
      Secondary_NameNode: "bind(cloudera-hive#cloudera-hadoop.Secondary_NameNode)"
      Hbase_Master: "bind(cloudera-hive#cloudera-hadoop.Hbase_Master)"
      Hbase_MasterDns: "bind(cloudera-hive#cloudera-hadoop.Hbase_MasterDns)"
      JobTracker: "bind(cloudera-hive#cloudera-hadoop.JobTracker)"
      cloudera_hdfsWebui: "bind(cloudera-hive#cloudera-hadoop.cloudera_hdfsWebui)"
      cloudera_jobtrackerWebui: "bind(cloudera-hive#cloudera-hadoop.cloudera_jobtrackerWebui)"
      cloudera_hbaseWebui: "bind(cloudera-hive#cloudera-hadoop.cloudera_hbaseWebui)"
    cloudera-hive:
      Hive_Server: "bind(cloudera-hive#result.Hive_Server)"
      Hive_Metastore: "bind(cloudera-hive#result.Hive_Metastore)"
      application-pic: "bind(metadata#output.application-pic)"
  components:
    metadata:
      type: cobalt.common.Constants
      interfaces:
        output:
          application-pic:
            type: publish-signal(map<string, object>)
            name: ""
      configuration:
        configuration.values:
          output.application-pic:
            large: "https://s3.amazonaws.com/qubell-images/hive.png"
            small: "https://s3.amazonaws.com/qubell-images/hive.png"
            small-height: 90
    cloudera-hive:
      type: workflow.Instance
      interfaces:
        input:
          repository_url:
            type: configuration(string)
            name: Cloudera RPM repository
          cookbooks_url:
            type: configuration(string)
            name: Chef cookbooks
          cloudera_hadoop_version:
            type: configuration(string)
            name: Cloudera Hadoop version
          cloudera_manager_version:
            type: configuration(string)
            name: Cloudera Manager version
          metastore_root_password:
            type: configuration(string)
            name: MetaStore root password
        compute-Manager:
          networks:        consume-signal(map<string, map<string, string>>)
          exec:            send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:        send-command(string filename, bytes payload)
          get-file:        send-command(string filename => bytes payload)
        compute-DataNodes:
          networks:        consume-signal(map<string, map<string, string>>)
          exec:            send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:        send-command(string filename, bytes payload)
          get-file:        send-command(string filename => bytes payload)
        vms:
          Node_Manager_DNS: consume-signal(string)
          Node_Master_DNS: consume-signal(string)
          DataNodesDNS: consume-signal(list<string>)
        cloudera-hadoop:
          NameNode: consume-signal(list<string>)
          Primary_NameNode: consume-signal(list<string>)
          Secondary_NameNode: consume-signal(list<string>)
          Hbase_Master: consume-signal(list<string>)
          Hbase_MasterDns: consume-signal(string)
          JobTracker: consume-signal(list<string>)
          cloudera_hdfsWebui: consume-signal(list<string>)
          cloudera_jobtrackerWebui: consume-signal(list<string>)
          cloudera_hbaseWebui: consume-signal(list<string>)
        result:
          Hive_Server:
            type: publish-signal(list<string>)
            name: Hive server
          Hive_Metastore:
            type: publish-signal(list<string>)
            name: Hive Metastore server
      required: [vms, cloudera-hadoop, compute-Manager, compute-DataNodes]
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - get-signals:
                  action: getSignals
                  parameters:
                    multi: true
                  output:
                    signals: result
              - packages-hive:
                  action: chefrun
                  precedingPhases: [ get-signals ]
                  parameters:
                    isSudo: true
                    isSolo: true
                    roles: [ "compute-Manager" ]
                    recipeUrl: "{$.cookbooks_url}"
                    runList: [ "recipe[cloudera::hive_rc]" ]
                    retryCount: 2
                    jattrs:
                      java:
                        java_home: "/usr/java/jdk6"
                      cloudera:
                        master:
                          host: "{$.signals.vms.*.Node_Master_DNS[0]}"
                        manager:
                          host: "{$.signals.vms.*.Node_Manager_DNS[0]}"
                          version: "{$.cloudera_manager_version}"
                        datanodes:
                          hosts: "{$.signals.vms.*.DataNodesDNS}"
                        hadoop:
                          version: "{$.cloudera_hadoop_version}"
                        repository_url: "{$.repository_url}"
                      mysql:
                        server_debian_password: "{$.metastore_root_password}"
                        server_root_password: "{$.metastore_root_password}"
                        server_repl_password: "{$.metastore_root_password}"
                        bind_address: "127.0.0.1"

              - packages-client-hive:
                  action: chefrun
                  precedingPhases: [ packages-hive ]
                  parameters:
                      isSudo: true
                      isSolo: true
                      roles: [ "compute-Manager", "compute-DataNodes" ]
                      recipeUrl: "{$.cookbooks_url}"
                      runList: [ "recipe[cloudera::hive_client_pkg]" ]
                      retryCount: 2
                      jattrs:
                        java:
                          java_home: "/usr/java/jdk6"
                        cloudera:
                          master:
                            host: "{$.signals.vms.*.Node_Master_DNS[0]}"
                          manager:
                            host: "{$.signals.vms.*.Node_Manager_DNS[0]}"
                            version: "{$.cloudera_manager_version}"
                          hadoop:
                            version: "{$.cloudera_hadoop_version}"
                          repository_url: "{$.repository_url}"

              - services-hive:
                  action: chefrun
                  precedingPhases: [ packages-client-hive ]
                  parameters:
                      isSudo: true
                      isSolo: true
                      roles: [ "compute-Manager" ]
                      recipeUrl: "{$.cookbooks_url}"
                      runList: [ "recipe[cloudera::hive]" ]
                      jattrs:
                        java:
                          java_home: "/usr/java/jdk6"
                        cloudera:
                          master:
                            host: "{$.signals.vms.*.Node_Master_DNS[0]}"
                          manager:
                            host: "{$.signals.vms.*.Node_Manager_DNS[0]}"
                            version: "{$.cloudera_manager_version}"
                          datanodes:
                            hosts: "{$.signals.compute-DataNodes.*.networks.public.ip}"
                          hadoop:
                            version: "{$.cloudera_hadoop_version}"
                          repository_url: "{$.repository_url}" 
            return:
              - Hive_Server:
                  description: "Hive server node"
                  value: "{$.signals.compute-Manager.*.networks.public.ip}"
              - Hive_Metastore:
                  description: "Hive Metastore node"
                  value: "{$.signals.compute-Manager.*.networks.public.ip}"                 
